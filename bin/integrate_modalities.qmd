---
params:
  seurat: "../results/seurat/seurat_after_qc.RDS"
  pipeline: "multiome"
  umap2_ndims: 30
  first_lsi_pc: 2
  integrate_datasets: true
  sketch_cells: true
  sketch_n: 5000
  
---

## Multimodal integration

```{r setup, warning=F, message=F, echo=knitr::is_html_output(), eval=T}

selected_packages <- c("Seurat",
                       "Signac",
                       'tidyverse',
                       'readxl',
                       'patchwork',
                       'clustree')
#invisible(extrafont::font_import(prompt = F))
selected_font <- "Arial"
selected_font_pdf <- "ArialMT"
#extrafont::loadfonts(device = "win")
invisible(lapply(selected_packages, library, character.only = TRUE))

if(knitr::is_html_output()){
  eval_set <- TRUE
  eval_pdf <- FALSE
  echo_set <- TRUE
  message_set <- FALSE
} else {
  eval_set <- FALSE
  eval_pdf <- TRUE
  echo_set <- FALSE
  message_set <- FALSE
}

source("run_funcs.R")
options(future.globals.maxSize = 12 * 1024^3)

knitr::opts_chunk$set(echo = echo_set,  warning = FALSE, message = FALSE, fig.align = "center", eval = params$eval, fig.width = 10, cache.lazy = F)

```

```{r echo=F}

run_gex <- FALSE
run_atac <- FALSE
run_adt <- FALSE

multimodal <- FALSE

assayLS <- c()
if(params$pipeline %in% c("cite", 'multiome', 'teaseq')){
  multimodal <- TRUE
}

if(params$pipeline != "atac"){
  run_gex <- TRUE
}

if(params$pipeline %in% c("atac", 'multiome', 'teaseq')){
  run_atac <- TRUE
}

if(params$pipeline %in% c("cite", 'teaseq')){
  run_adt <- TRUE
}

```

```{r echo = echo_set}



fetch_reduction <- function(pipeline = params$pipeline, sketched = params$sketch_cells, integrated = params$integrate_datasets){
  assay_dict <-  list(
                    "multiome" = c("RNA", "ATAC"),
                    "teaseq" = c("RNA", "ATAC", "ADT"),
                    "rna" = c("RNA"),
                    "atac" = c("ATAC"),
                    "cite" = c("RNA", "ADT")
                  )
  reductLS <- list("RNA" = list("full" = list("raw" = list("PCA" = "pca", "UMAP" = "umap.rna"),
                                            "integrated" = list("PCA" = "integrated.rna", "UMAP" = "umap.rna.int")),
                               "sketched" = list("raw" = list("PCA" = "pca.sk", "UMAP" = "umap.sk"),
                                                  "integrated" = list("PCA" = "integrated.rna.sk", "UMAP" = "umap.rna.int.sk")),
                               "dims" = 1:params$umap2_ndims),
                 "ATAC" = list("full" = list("raw" = list("PCA" = "lsi", "UMAP" = "umap.atac"),
                                            "integrated" = list("PCA" = "integrated_lsi", "UMAP" = "umap.atac")),
                               "sketched" = list("raw" = list("PCA" = "lsi", "UMAP" = "umap.atac"),
                                            "integrated" = list("PCA" = "integrated_lsi", "UMAP" = "umap.atac")),
                                "dims" = params$first_lsi_pc:30),
                 "ADT" = list("full" = list("raw" = list("PCA" = "apca", "UMAP" = "umap.atac"),
                                            "integrated" = list("PCA" = "integrated.adt", "UMAP" = "umap.adt.int")),
                              "sketched" = list("raw" = list("PCA" = "lsi", "UMAP" = "umap.atac"),
                                            "integrated" = list("PCA" = "integrated_lsi", "UMAP" = "umap.adt")),
                              "dims" = 1:20))
  
  sketch_val <- if (sketched) "sketched" else "full"
  int_val <- if (integrated) "integrated" else "raw"
  
  assay <- assay_dict[[pipeline]]
  default_assay <- if(sketched) "sketch" else assay[1]
  
  result <- list( "PCA" = as.list(unique(unlist(lapply(assay, function(a) reductLS[[a]][[sketch_val]][[int_val]][["PCA"]])))),
                  "UMAP" = as.list(unique(unlist(lapply(assay, function(a) reductLS[[a]][[sketch_val]][[int_val]][["UMAP"]])))),
                  "dims" = lapply(assay, function(a) reductLS[[a]][["dims"]]),
                  "assays" = assay,
                  "default_assay" = default_assay)
  
  return(result)
  
}




reduct_pca <- fetch_reduction( sketched = F)

```

### Analysis Parameters
```{r echo=FALSE}

df <- params_to_df(params)
df
```

### Load Data
```{r }
seurat <- readRDS(params$seurat)

```


```{r echo=F}
wnn_blurb <- "### Multimodal Integration\nSeurat objects with multiple modalities, such as RNA, ATAC or ADT, can be combined into a single dimension reduction with weighted Nearest Neighbour (wNN) dimension reduction."

```

`r if(multimodal){wnn_blurb}`
```{r echo=echo_set}


DefaultAssay(seurat) <- reduct_pca$default_assay

seurat <- FindMultiModalNeighbors(seurat, 
                                reduction.list = reduct_pca$PCA, 
                                dims.list = reduct_pca$dims)



seurat <- RunUMAP(seurat, 
                  nn.name = "weighted.nn", 
                  reduction.name = "wnn.umap", 
                  reduction.key = "wnnUMAP_")

```


```{r eval=multimodal, echo=multimodal & echo_set}
DimPlot(seurat, group.by = "SampleID", reduction = 'wnn.umap', raster = T ) + ggtitle("wNN Integration")

```


```{r }
saveRDS(seurat, file = "seurat_integrated_wnn.RDS")

```
